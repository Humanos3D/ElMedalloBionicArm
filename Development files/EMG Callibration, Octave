arduinodata = dlmread ('myfilename.csv',';',0,0); %importing data

%%sometimes the arduino background read glitches, becoming zero, creating
%%an unexpected peak of >1.45V
[overpeak, locplac] = findpeaks(arduinodata(:,4),'MinPeakHeight',1.45);
[overpeak2, locplac2] = findpeaks(arduinodata(:,8),'MinPeakHeight',1.45);

arduinodata(locplac,4) = 0;
arduinodata(locplac2,8) = 0;


%peakfilter is used to remove all peaks under less than half the amplitude of the highest peak
peakfilter1=(max(arduinodata(:,4)))/2;
peakfilter2=(max(arduinodata(:,8)))/2;

%%displaying the plots for the transient signal for sensor 1 (blue) and sensor 2 (red)
f1=figure
plot(arduinodata(:,4))
hold on
plot(arduinodata(:,8))

%%Find Peaks on each of the data, 500 data points apart and above half the value of the max peak
[peakVal, locVal] = findpeaks(arduinodata(:,4),'MinPeakDistance',500,'MinPeakHeight',peakfilter1);
[peakVal2, locVal2] = findpeaks(arduinodata(:,8),'MinPeakDistance',500,'MinPeakHeight',peakfilter2);


s = size(locVal);%number of signal 1 peaks
s2=size(locVal2);%number of signal 2 peaks

%%printing various error messages based on the number of peaks. Should only be 6 as the protocol states 6 comfortable grip-activating contractions, for each sensor, are to be performed 
 if s > 6
   fprintf('Sensor 1 Error 1');
 end
 if s2 > 6
   fprintf('Sensor 2 Error 2');
end
if 0 < s < 6
   fprintf('Sensor 1 Error 2');
 end
 if 0 < s2 < 6
   fprintf('Sensor 2 Error 2');
end

AV1=mean(peakVal);%mean peak amplitude of signal 1
AV2=mean(peakVal2);%mean peak amplitude of signal 2

MIN1=min(peakVal);%min peak amplitude of signal 1
MIN2=min(peakVal2);%min peak amplitude of signal 1

%%Calculating threshold through peak voltage and background signal during
%%regular movements, selecting all data points that are more than 50 data points away from the peak

locationnormalsignal1 = [locVal - 50, locVal + 50];
locationnormalsignal2 = [locVal2 - 50, locVal2 + 50];

normalsignal1=zeros(15000);
normalsignal1=arduinodata(1:locationnormalsignal1(1,1),4);
for i=2:s
h=size(normalsignal1);
newnormalsignal=arduinodata(locationnormalsignal1((i-1),2):locationnormalsignal1((i),1),4);
h2=size(newnormalsignal);
normalsignal1(h+1:h2+h,1)=arduinodata(locationnormalsignal1((i-1),2):locationnormalsignal1((i),1),4);
end

normalsignal2=zeros(15000);
normalsignal2=arduinodata(1:locationnormalsignal2(1,1),8);
for i=2:s2
h=size(normalsignal2);
newnormalsignal2=arduinodata(locationnormalsignal2((i-1),2):locationnormalsignal2((i),1),8);
h2=size(newnormalsignal2);
normalsignal2(h+1:h2+h,1)=arduinodata(locationnormalsignal2((i-1),2):locationnormalsignal2((i),1),8);
end

normalsignalonepercent1i = sortrows(normalsignal1, -1);
nrows1 = size(normalsignalonepercent1i);
nthrows1=round((1*nrows1)/500);
normalsignalonepercent1=normalsignalonepercent1i(1:nthrows1,:);

normalsignalonepercent2i = sortrows(normalsignal2, -1);
nrows2 = size(normalsignalonepercent2i);
nthrows2=round((1*nrows2)/500);
normalsignalonepercent2=normalsignalonepercent2i(1:nthrows2,:);


BackgroundThreshold1=mean(normalsignalonepercent1);
BackgroundThreshold2=mean(normalsignalonepercent2);

%%error code stating that if any of the peaks are below the background threshold, there is something wrong. Should have already been picked up in earlier error mesages but can never be too safe.
if MIN1<=BackgroundThreshold1
   fprintf('Sensor 1 Error 3');
end

if MIN2<=BackgroundThreshold2
   fprintf('Sesnsor 2 Error 3');
end

%%Sets the threshold as 2/3 between the smallest peak and the top percentile of the background threshold
Threshold1 = ((MIN1-mean(normalsignalonepercent1))*(2/3))+mean(normalsignalonepercent1);
Threshold2 = ((MIN2-mean(normalsignalonepercent2))*(2/3))+mean(normalsignalonepercent2);


%%False Posiitive test (receiving signal desired for the other sensor)
Sensor2atSensor1Peak = arduinodata(locVal(:)-20:locVal(:)+20,8);
Sensor1atSensor2Peak = arduinodata(locVal2(:)-20:locVal2+20,4);

Sensor2flasepositive = Sensor2atSensor1Peak > Threshold2;
Sensor1falsepositive = Sensor1atSensor2Peak > Threshold1;

%%error messages for false positives
if any(Sensor2flasepositive)
    fprintf('Sesnsor 2 Error 4');
end

if any(Sensor1falsepositive)
    fprintf('Sesnsor 1 Error 4');
end

%%rise time 1

FS=mean((arduinodata(1:1000,9))*100);   %obtaining the rate of capture was in hundreds of Hz in matlab to keep serial plotter the same
T=(1/FS)*1000;                          %Average time difference between each data point


locVa1new = zeros(s); %sets variable(didnt set before)
locVa1new = locVal;  

for i=1:s %goes through and edits each row of locValnew one at a time
while ((arduinodata(locVa1new(i), 4)) > Threshold1) %rise time in arduino is in relation to last low. hence why I have compared to the threshold and not to a % of the peak as is standard. 
    
    locVa1new(i) = locVa1new(i) - 1; %Increments the locaion of the peak down by 1 until it is lower than the threshold.
    
end
end


riseTime1 = min((locVal-locVa1new)*T); % minimum rise time should be used otherwise some peaks may be missed

%%riseTime 2

locVa1new2 = zeros(s2);
locVa1new2 = locVal2;

for i=1:s2
while ((arduinodata(locVa1new2(i), 8)) > Threshold2)
    
    locVa1new2(i) = locVa1new2(i) - 1;
    
end
end


riseTime2 = min((locVal2-locVa1new2)*T); % Average Rise time

%%Printing Appropriate Parameters
fprintf('Sensor 1 Threshold is:%d\n', Threshold1);
fprintf('Sensor 1 Rise Time is:%d\n', riseTime1);
fprintf('Sensor 2 Threshold is:%d\n', Threshold2);
fprintf('Sensor 2 Rise Time is:%d\n', riseTime2);
